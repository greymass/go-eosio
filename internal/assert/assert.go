package assert

import (
	"bytes"
	"encoding/json"
	"fmt"
	"reflect"
	"runtime"
	"strings"
	"testing"
	"unicode"
	"unicode/utf8"

	"github.com/greymass/go-eosio/pkg/chain"
)

func Fail(t *testing.T, message string) {
	info := callerInfo()
	t.Errorf("\n"+
		"%s: %s",
		info, message,
	)
}

func NoError(t *testing.T, err error) {
	if err != nil {
		Fail(t, fmt.Sprintf("Unexpected error: %s", err.Error()))
	}
}

func HasError(t *testing.T, err *error) {
	if err == nil {
		Fail(t, "Expected error, got nil")
	} else {
		// unset the error so subsequent calls won't cause false negatives
		*err = nil
	}
}

func NotNil(t *testing.T, actual interface{}) {
	if actual == nil {
		Fail(t, "Unexpected nil")
	}
}

func True(t *testing.T, value bool) {
	if !value {
		Fail(t, "Should be true")
	}
}

func Equal(t *testing.T, actual, expected interface{}) {
	if !isEqual(actual, expected) {
		Fail(t, fmt.Sprintf("\n"+
			"Not equal: %#v (actual <%v>)\n"+
			"        != %#v (expected <%v>)",
			actual, reflect.TypeOf(actual),
			expected, reflect.TypeOf(expected)))
	}
}

func JSONEqual(t *testing.T, actual string, expected string) {
	var actualI, expectedI interface{}
	if err := json.Unmarshal([]byte(actual), &actualI); err != nil {
		Fail(t, fmt.Sprintf("Unable to parse 'actual' JSON: %s", err.Error()))
		return
	}
	if err := json.Unmarshal([]byte(expected), &expectedI); err != nil {
		Fail(t, fmt.Sprintf("Unable to parse 'expected' JSON: %s", err.Error()))
		return
	}
	Equal(t, expectedI, actualI)
}

func JSONCoding(t *testing.T, value interface{}, expectedJSON string) {
	data, err := json.Marshal(value)
	NoError(t, err)
	JSONEqual(t, string(data), expectedJSON)
	var valueRecoded interface{}
	valueRecoded = reflect.New(reflect.ValueOf(value).Type()).Interface()
	err = json.NewDecoder(bytes.NewReader(data)).Decode(valueRecoded)
	NoError(t, err)
	valueRecoded = reflect.ValueOf(valueRecoded).Elem().Interface()
	Equal(t, valueRecoded, value)
}

func ABICoding(t *testing.T, value interface{}, expectedBytes []byte) {
	// TODO: also encode here when we have an encoder
	var valueRecoded interface{}
	valueRecoded = reflect.New(reflect.ValueOf(value).Type()).Interface()
	err := chain.NewDecoder(bytes.NewReader(expectedBytes)).Decode(valueRecoded)
	NoError(t, err)
	valueRecoded = reflect.ValueOf(valueRecoded).Elem().Interface()
	Equal(t, valueRecoded, value)
}

func isEqual(actual, expected interface{}) bool {
	if expected == nil || actual == nil {
		return expected == actual
	}

	exp, ok := expected.([]byte)
	if !ok {
		return reflect.DeepEqual(expected, actual)
	}

	act, ok := actual.([]byte)
	if !ok {
		return false
	}
	if exp == nil || act == nil {
		return exp == nil && act == nil
	}
	return bytes.Equal(exp, act)
}

// from github.com/stretchr/testify

func callerInfo() []string {
	var pc uintptr
	var ok bool
	var file string
	var line int
	var name string

	callers := []string{}
	for i := 0; ; i++ {
		pc, file, line, ok = runtime.Caller(i)
		if !ok {
			// The breaks below failed to terminate the loop, and we ran off the
			// end of the call stack.
			break
		}

		// This is a huge edge case, but it will panic if this is the case, see #180
		if file == "<autogenerated>" {
			break
		}

		f := runtime.FuncForPC(pc)
		if f == nil {
			break
		}
		name = f.Name()

		// testing.tRunner is the standard library function that calls
		// tests. Subtests are called directly by tRunner, without going through
		// the Test/Benchmark/Example function that contains the t.Run calls, so
		// with subtests we should break when we hit tRunner, without adding it
		// to the list of callers.
		if name == "testing.tRunner" {
			break
		}

		parts := strings.Split(file, "/")
		file = parts[len(parts)-1]
		if len(parts) > 1 {
			dir := parts[len(parts)-2]
			if (dir != "assert" && dir != "mock" && dir != "require") || file == "mock_test.go" {
				callers = append(callers, fmt.Sprintf("%s:%d", file, line))
			}
		}

		// Drop the package
		segments := strings.Split(name, ".")
		name = segments[len(segments)-1]
		if isTest(name, "Test") ||
			isTest(name, "Benchmark") ||
			isTest(name, "Example") {
			break
		}
	}

	return callers
}

// Stolen from the `go test` tool.
// isTest tells whether name looks like a test (or benchmark, according to prefix).
// It is a Test (say) if there is a character after Test that is not a lower-case letter.
// We don't want TesticularCancer.
func isTest(name, prefix string) bool {
	if !strings.HasPrefix(name, prefix) {
		return false
	}
	if len(name) == len(prefix) { // "Test" is ok
		return true
	}
	r, _ := utf8.DecodeRuneInString(name[len(prefix):])
	return !unicode.IsLower(r)
}
