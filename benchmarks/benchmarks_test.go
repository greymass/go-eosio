package benchmarks_test

import (
	"bytes"
	"testing"

	"github.com/greymass/go-eosio/internal/assert"
	"github.com/greymass/go-eosio/pkg/abi"
	"github.com/greymass/go-eosio/pkg/chain"

	eoscanada "github.com/eoscanada/eos-go"
)

var testData = []byte{
	0x94, 0x07, 0x8e, 0x5a, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x04, 0x05, 0x01, 0x00, 0x00,
	0x00, 0x18, 0x1b, 0xe9, 0xd5, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x26, 0x9d, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x64, 0x00, 0x00, 0x00, 0x00, 0xa8, 0xed, 0x32, 0x32, 0x02,
	0xbe, 0xef, 0x02, 0x00, 0x00, 0x00, 0x18, 0x1b, 0xe9, 0xd5, 0x65, 0x00, 0x00, 0x90, 0x97, 0x2e,
	0x3c, 0xcd, 0xcd, 0x06, 0x00, 0x00, 0x00, 0x92, 0x81, 0x49, 0xaf, 0x31, 0x00, 0x00, 0x00, 0x40,
	0x41, 0x83, 0xa6, 0xa9, 0x00, 0x00, 0x90, 0x0c, 0x44, 0xe5, 0xa6, 0x49, 0x00, 0x00, 0x00, 0x40,
	0x41, 0x83, 0xa6, 0xa9, 0x00, 0x00, 0x00, 0x92, 0x81, 0x69, 0x1a, 0x7d, 0x00, 0x00, 0x00, 0x40,
	0x41, 0x83, 0xa6, 0xa9, 0x00, 0x00, 0x00, 0x00, 0x48, 0x06, 0xba, 0x91, 0x00, 0x00, 0x00, 0x40,
	0x41, 0x83, 0xa6, 0xa9, 0x00, 0x00, 0x00, 0x92, 0x01, 0xac, 0xa2, 0x97, 0x00, 0x00, 0x00, 0x40,
	0x41, 0x83, 0xa6, 0xa9, 0x00, 0x00, 0x00, 0x92, 0x81, 0x9c, 0x29, 0xc2, 0x00, 0x00, 0x00, 0x40,
	0x41, 0x83, 0xa6, 0xa9, 0x04, 0xde, 0xad, 0xc0, 0xde, 0x00, 0x00, 0x00, 0x18, 0x1b, 0xe9, 0xd5,
	0x65, 0x00, 0x00, 0x00, 0x40, 0x65, 0x8d, 0x54, 0x57, 0x01, 0x80, 0xb1, 0x91, 0x5e, 0x5d, 0x26,
	0x8d, 0xca, 0x00, 0x00, 0x00, 0x00, 0xa8, 0xed, 0x32, 0x32, 0x80, 0x01, 0xba, 0xbe, 0x92, 0x3c,
	0x59, 0xd5, 0x14, 0x5b, 0xc3, 0x13, 0x03, 0x93, 0x35, 0xf5, 0x9f, 0x3b, 0xc7, 0x55, 0xfd, 0xe1,
	0xde, 0xaf, 0xa1, 0x0e, 0x62, 0x43, 0xff, 0xf4, 0x23, 0x46, 0xbe, 0xb4, 0xb1, 0xe7, 0x81, 0x88,
	0x5f, 0x1b, 0x6c, 0x82, 0x42, 0x60, 0x79, 0xcc, 0xb2, 0x7d, 0x9e, 0x74, 0x2f, 0x3f, 0x7f, 0x4e,
	0x1b, 0x7b, 0xd0, 0xb9, 0x50, 0x82, 0x6d, 0x44, 0x3b, 0x50, 0xc2, 0xe6, 0xde, 0x34, 0xc0, 0x84,
	0x6f, 0xcd, 0x84, 0xfa, 0x73, 0x6e, 0x70, 0x0e, 0xc5, 0x0b, 0x6b, 0xce, 0xbf, 0x36, 0x75, 0x41,
	0x1d, 0x45, 0x48, 0x26, 0x07, 0xe1, 0x92, 0x2b, 0xcf, 0x8f, 0x9d, 0xf8, 0x5b, 0xc9, 0x8c, 0xb7,
	0x1e, 0xcf, 0xa1, 0x67, 0x05, 0x36, 0xe3, 0x34, 0x0e, 0xd9, 0xc5, 0x9a, 0xe9, 0x54, 0xa6, 0x91,
	0x6d, 0xed, 0x90, 0xa9, 0xe7, 0x88, 0x1e, 0xf1, 0xbb, 0x41, 0x1c, 0x05, 0x00,
}

// sanity checks that we are actually decoding the test data correctly

func TestDecode(t *testing.T) {
	var err error
	var tx chain.Transaction

	err = chain.NewDecoder(bytes.NewReader(testData)).Decode(&tx)
	assert.NoError(t, err)
	assert.Equal(t, tx.Actions[len(tx.Actions)-1].Account.String(), "greymass")
}

func TestDecodeEosCanada(t *testing.T) {
	var err error
	var tx eoscanada.Transaction

	err = eoscanada.NewDecoder(testData).Decode(&tx)
	assert.NoError(t, err)
	assert.Equal(t, tx.Actions[len(tx.Actions)-1].Account, eoscanada.AccountName("greymass"))
}

// benchmarks

func BenchmarkDecode(b *testing.B) {
	var err error
	for i := 0; i < b.N; i++ {
		var tx chain.Transaction
		err = chain.NewDecoder(bytes.NewReader(testData)).Decode(&tx)
		if err != nil {
			b.Fatal(err)
		}
	}
}

// copy of chain types with no UnmarshalABI methods so they are forced to use reflection
type TransactionHeader struct {
	Expiration       uint32
	RefBlockNum      uint16
	RefBlockPrefix   uint32
	MaxNetUsageWords uint
	MaxCpuUsageMs    uint8
	DelaySec         uint
}
type TransactionExtension struct {
	Type uint16
	Data []byte
}
type Transaction struct {
	TransactionHeader
	ContextFreeActions []Action
	Actions            []Action
	Extensions         []TransactionExtension
}
type PermissionLevel struct {
	Actor      uint64
	Permission uint64
}
type Action struct {
	Account       uint64
	Name          uint64
	Authorization []PermissionLevel
	Data          []byte
}

// noop decoder with no specializations
func noopDecode(dec *abi.Decoder, v interface{}) (done bool, err error) {
	return false, nil
}

func BenchmarkDecodeNoOptimize(b *testing.B) {
	var err error
	for i := 0; i < b.N; i++ {
		var tx Transaction
		err = abi.NewDecoder(bytes.NewReader(testData), noopDecode).Decode(&tx)
		if err != nil {
			b.Fatal(err)
		}
	}
}

// the competition :)

func BenchmarkDecodeEosCanada(b *testing.B) {
	var err error
	for i := 0; i < b.N; i++ {
		var tx eoscanada.Transaction
		err = eoscanada.NewDecoder(testData).Decode(&tx)
		if err != nil {
			b.Fatal(err)
		}
	}
}
