package chain_test

import (
	"math"
	"math/big"
	"testing"

	"github.com/greymass/go-eosio/internal/assert"
	"github.com/greymass/go-eosio/pkg/chain"
)

func TestUint128(t *testing.T) {
	i1 := chain.Uint128{
		Lo: 0xffffffffffffffff,
		Hi: 0xffffffffffffffff,
	}
	assert.JSONCoding(t, i1, `"340282366920938463463374607431768211455"`)
	assert.ABICoding(t, i1, []byte{
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	})
	i2, err := chain.NewUint128FromString("18446744073709551615")
	assert.NoError(t, err)
	assert.JSONCoding(t, i2, `"18446744073709551615"`)
	assert.ABICoding(t, i2, []byte{
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	})
	i3 := chain.NewUint128(big.NewInt(1))
	assert.NoError(t, err)
	assert.JSONCoding(t, i3, `"1"`)
	assert.ABICoding(t, i3, []byte{
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	})
	i4 := chain.Uint128{
		Lo: 0,
		Hi: 0,
	}
	assert.NoError(t, err)
	assert.JSONCoding(t, i4, `"0"`)
	assert.ABICoding(t, i4, []byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	})
}

func TestInt128(t *testing.T) {
	tests := []struct {
		in   string
		json string
		abi  []byte
	}{
		{
			"0",
			`"0"`,
			[]byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
		{
			"1",
			`"1"`,
			[]byte{
				0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
		{
			"-1",
			`"-1"`,
			[]byte{
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			},
		},
		{
			"-170141183460469231731687303715884105727",
			`"-170141183460469231731687303715884105727"`,
			[]byte{
				0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
			},
		},
		{
			"-18446744073709551615",
			`"-18446744073709551615"`,
			[]byte{
				0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			},
		},
		{
			"18446744073709551615",
			`"18446744073709551615"`,
			[]byte{
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
	}
	for _, test := range tests {
		i, err := chain.NewInt128FromString(test.in)
		assert.NoError(t, err)
		assert.JSONCoding(t, i, test.json)
		assert.ABICoding(t, i, test.abi)
	}
}

func TestUint64(t *testing.T) {
	assert.JSONCoding(t, chain.Uint64(0), `0`)
	assert.JSONCoding(t, chain.Uint64(0xffffffffffffffff), `"18446744073709551615"`)
	assert.JSONCoding(t, chain.Uint64(0xffffffff), `4294967295`)
	assert.JSONCoding(t, chain.Uint64(4294967296), `"4294967296"`)
}

func TestFloat128(t *testing.T) {
	f1 := chain.Float128{
		Data: [16]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	}
	assert.JSONCoding(t, f1, `"00000000000000000000000000000000"`)
	f2 := chain.Float128{
		Data: [16]byte{0x12, 0x34, 0x56, 0x78, 0xab, 0xcd, 0xef, 0x12, 0x34, 0x56, 0x78, 0xab, 0xcd, 0xef, 0x12, 0x34},
	}
	assert.JSONCoding(t, f2, `"12345678abcdef12345678abcdef1234"`)
}

func TestBlockNum(t *testing.T) {
	bn := chain.BlockNum(0)
	assert.JSONCoding(t, bn, `0`)
	assert.Equal(t, bn.String(), "0000000000")
	bn = chain.BlockNum(math.MaxUint32)
	assert.JSONCoding(t, bn, `4294967295`)
	assert.Equal(t, bn.String(), "4294967295")
}
