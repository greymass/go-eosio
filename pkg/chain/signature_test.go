package chain_test

import (
	"testing"

	"github.com/greymass/go-eosio/internal/assert"
	"github.com/greymass/go-eosio/pkg/chain"
)

func TestSignature(t *testing.T) {
	var s *chain.Signature
	s = chain.NewSignature(chain.K1, []byte{
		0x20, 0x51, 0x50, 0xa6, 0x72, 0x88, 0xc3, 0xb3, 0x93, 0xfd, 0xba, 0x90, 0x61, 0xb0, 0x50, 0x19, 0xc5, 0x4b, 0x12, 0xbd,
		0xac, 0x29, 0x5f, 0xc8, 0x3b, 0xeb, 0xad, 0x7c, 0xd6, 0x3c, 0x7b, 0xb6, 0x7d, 0x5c, 0xb8, 0xcc, 0x22, 0x05, 0x64, 0xda,
		0x00, 0x62, 0x40, 0xa5, 0x84, 0x19, 0xf6, 0x4d, 0x06, 0xa5, 0xc6, 0xe1, 0xfc, 0x62, 0x88, 0x98, 0x16, 0xa6, 0xc3, 0xdf,
		0xdd, 0x23, 0x1e, 0xd3, 0x89,
	})
	assert.JSONCoding(t, s, `"SIG_K1_KfPLgpw35iX8nfDzhbcmSBCr7nEGNEYXgmmempQspDJYBCKuAEs5rm3s4ZuLJY428Ca8ZhvR2Dkwu118y3NAoMDxhicRj9"`)
	assert.ABICoding(t, s, []byte{
		0x00, 0x20, 0x51, 0x50, 0xa6, 0x72, 0x88, 0xc3, 0xb3, 0x93, 0xfd, 0xba, 0x90, 0x61, 0xb0, 0x50, 0x19, 0xc5, 0x4b, 0x12, 0xbd,
		0xac, 0x29, 0x5f, 0xc8, 0x3b, 0xeb, 0xad, 0x7c, 0xd6, 0x3c, 0x7b, 0xb6, 0x7d, 0x5c, 0xb8, 0xcc, 0x22, 0x05, 0x64, 0xda,
		0x00, 0x62, 0x40, 0xa5, 0x84, 0x19, 0xf6, 0x4d, 0x06, 0xa5, 0xc6, 0xe1, 0xfc, 0x62, 0x88, 0x98, 0x16, 0xa6, 0xc3, 0xdf,
		0xdd, 0x23, 0x1e, 0xd3, 0x89,
	})

	s = chain.NewSignature(chain.WA, []byte{
		0x20, 0xd9, 0x13, 0x2b, 0xbd, 0xb2, 0x19, 0xe4, 0xe2, 0xd9, 0x9a, 0xf9, 0xc5, 0x07, 0xe3, 0x59, 0x7f, 0x86, 0xb6, 0x15, 0x81,
		0x4f, 0x36, 0x67, 0x2d, 0x50, 0x10, 0x34, 0x86, 0x17, 0x92, 0xbb, 0xcf, 0x21, 0xa4, 0x6d, 0x1a, 0x2e, 0xb1, 0x2b, 0xac, 0xe4,
		0xa2, 0x91, 0x00, 0xb9, 0x42, 0xf9, 0x87, 0x49, 0x4f, 0x3a, 0xef, 0xc8, 0xef, 0xb2, 0xd5, 0xaf, 0x4d, 0x4d, 0x8d, 0xe3, 0xe0,
		0x87, 0x15, 0x25, 0xaa, 0x14, 0x90, 0x5a, 0xf6, 0x0c, 0xa1, 0x7a, 0x1b, 0xb8, 0x0e, 0x0c, 0xf9, 0xc3, 0xb4, 0x69, 0x08, 0xa0,
		0xf1, 0x4f, 0x72, 0x56, 0x7a, 0x2f, 0x14, 0x0c, 0x3a, 0x3b, 0xd2, 0xef, 0x07, 0x4c, 0x01, 0x00, 0x00, 0x00, 0x6d, 0x73, 0x7b,
		0x22, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x3a, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x65, 0x6f,
		0x73, 0x64, 0x2e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x77,
		0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x22, 0x2c, 0x22, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
		0x67, 0x65, 0x22, 0x3a, 0x22, 0x6f, 0x69, 0x56, 0x72, 0x35, 0x79, 0x48, 0x48, 0x30, 0x4a, 0x43, 0x36, 0x45, 0x39, 0x62, 0x44,
		0x66, 0x75, 0x34, 0x71, 0x42, 0x73, 0x5a, 0x6a, 0x52, 0x7a, 0x70, 0x41, 0x6c, 0x51, 0x31, 0x50, 0x5a, 0x50, 0x43, 0x6e, 0x59,
		0x74, 0x76, 0x68, 0x50, 0x55, 0x6b, 0x3d, 0x22, 0x7d,
	})
	assert.JSONCoding(t, s, `
		"SIG_WA_2AAAuLJS3pLPgkQQPqLsehL6VeRBaAZS7NYM91UYRUrSAEfUvzKN7DCSwhjsDqe74cZNWKUUGAHGG8ddSA7cvUxChbfKxLSrDCpwe6MVUqz4PDdyCt5tXhEJmKekxG1o1ucY3LVj8Vi9rRbzAkKPCzWqC8cPcUtpLHNG8qUKkQrN4Xuwa9W8rsBiUKwZv1ToLyVhLrJe42pvHYBXicp4E8qec5E4m6SX11KuXERFcV48Mhiie2NyaxdtNtNzQ5XZ5hjBkxRujqejpF4SNHvdAGKRBbvhkiPLA25FD3xoCbrN26z72"
	`)
	assert.ABICoding(t, s, []byte{
		0x02, 0x20, 0xd9, 0x13, 0x2b, 0xbd, 0xb2, 0x19, 0xe4, 0xe2, 0xd9, 0x9a, 0xf9, 0xc5, 0x07, 0xe3, 0x59, 0x7f, 0x86, 0xb6, 0x15, 0x81,
		0x4f, 0x36, 0x67, 0x2d, 0x50, 0x10, 0x34, 0x86, 0x17, 0x92, 0xbb, 0xcf, 0x21, 0xa4, 0x6d, 0x1a, 0x2e, 0xb1, 0x2b, 0xac, 0xe4,
		0xa2, 0x91, 0x00, 0xb9, 0x42, 0xf9, 0x87, 0x49, 0x4f, 0x3a, 0xef, 0xc8, 0xef, 0xb2, 0xd5, 0xaf, 0x4d, 0x4d, 0x8d, 0xe3, 0xe0,
		0x87, 0x15, 0x25, 0xaa, 0x14, 0x90, 0x5a, 0xf6, 0x0c, 0xa1, 0x7a, 0x1b, 0xb8, 0x0e, 0x0c, 0xf9, 0xc3, 0xb4, 0x69, 0x08, 0xa0,
		0xf1, 0x4f, 0x72, 0x56, 0x7a, 0x2f, 0x14, 0x0c, 0x3a, 0x3b, 0xd2, 0xef, 0x07, 0x4c, 0x01, 0x00, 0x00, 0x00, 0x6d, 0x73, 0x7b,
		0x22, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x3a, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x65, 0x6f,
		0x73, 0x64, 0x2e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x77,
		0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x22, 0x2c, 0x22, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
		0x67, 0x65, 0x22, 0x3a, 0x22, 0x6f, 0x69, 0x56, 0x72, 0x35, 0x79, 0x48, 0x48, 0x30, 0x4a, 0x43, 0x36, 0x45, 0x39, 0x62, 0x44,
		0x66, 0x75, 0x34, 0x71, 0x42, 0x73, 0x5a, 0x6a, 0x52, 0x7a, 0x70, 0x41, 0x6c, 0x51, 0x31, 0x50, 0x5a, 0x50, 0x43, 0x6e, 0x59,
		0x74, 0x76, 0x68, 0x50, 0x55, 0x6b, 0x3d, 0x22, 0x7d,
	})
}
